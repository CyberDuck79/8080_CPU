/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   emu_instructions.h                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fhenrion <fhenrion@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/01/11 13:13:41 by fhenrion          #+#    #+#             */
/*   Updated: 2020/02/13 18:10:11 by fhenrion         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef EMU_INSTRUCTIONS_H
# define EMU_INSTRUCTIONS_H

# include "emulator.h"

//// redo order by instructions address

void	NOP(t_registers *reg,t_memory *mem);
void	LXI_B(t_registers *reg,t_memory *mem);
void	STAX_B(t_registers *reg,t_memory *mem);
void	INX_B(t_registers *reg,t_memory *mem);
void	INR_B(t_registers *reg,t_memory *mem);
void	DCR_B(t_registers *reg,t_memory *mem);
void	MVI_B(t_registers *reg,t_memory *mem);
void	RLC(t_registers *reg,t_memory *mem);
void	DAD_B(t_registers *reg,t_memory *mem);
void	LDAX_B(t_registers *reg,t_memory *mem);
void	DCX_B(t_registers *reg,t_memory *mem);
void	INR_C(t_registers *reg,t_memory *mem);
void	DCR_C(t_registers *reg,t_memory *mem);
void	MVI_C(t_registers *reg,t_memory *mem);
void	RRC(t_registers *reg,t_memory *mem);
void	LXI_D(t_registers *reg,t_memory *mem);
void	STAX_D(t_registers *reg,t_memory *mem);
void	INX_D(t_registers *reg,t_memory *mem);
void	INR_D(t_registers *reg,t_memory *mem);
//// (WIP)
void	STC(t_registers *reg,t_memory *mem);
void	CMC(t_registers *reg,t_memory *mem);
void	HLT(t_registers *reg,t_memory *mem);
void	XTHL(t_registers *reg,t_memory *mem);
void	SPHL(t_registers *reg,t_memory *mem);
void	XCHG(t_registers *reg,t_memory *mem);
void	PCHL(t_registers *reg,t_memory *mem);
void	RNZ(t_registers *reg,t_memory *mem);
void	RNC(t_registers *reg,t_memory *mem);
void	RP(t_registers *reg,t_memory *mem);
void	RPO(t_registers *reg,t_memory *mem);
void	RPE(t_registers *reg,t_memory *mem);
void	RZ(t_registers *reg,t_memory *mem);
void	RC(t_registers *reg,t_memory *mem);
void	RM(t_registers *reg,t_memory *mem);
void	DI(t_registers *reg,t_memory *mem);
void	EI(t_registers *reg,t_memory *mem);
void	RET(t_registers *reg,t_memory *mem);
void	LXI_H(t_registers *reg,t_memory *mem);
void	LXI_SP(t_registers *reg,t_memory *mem);
void	INX_H(t_registers *reg,t_memory *mem);
void	INX_SP(t_registers *reg,t_memory *mem);
void	INR_A(t_registers *reg,t_memory *mem);
void	INR_E(t_registers *reg,t_memory *mem);
void	INR_H(t_registers *reg,t_memory *mem);
void	INR_L(t_registers *reg,t_memory *mem);
void	INR_M(t_registers *reg,t_memory *mem);
void	DCR_A(t_registers *reg,t_memory *mem);
void	DCR_D(t_registers *reg,t_memory *mem);
void	DCR_E(t_registers *reg,t_memory *mem);
void	DCR_H(t_registers *reg,t_memory *mem);
void	DCR_L(t_registers *reg,t_memory *mem);
void	DCR_M(t_registers *reg,t_memory *mem);
void	MVI_A(t_registers *reg,t_memory *mem);
void	MVI_D(t_registers *reg,t_memory *mem);
void	MVI_E(t_registers *reg,t_memory *mem);
void	MVI_H(t_registers *reg,t_memory *mem);
void	MVI_L(t_registers *reg,t_memory *mem);
void	MVI_M(t_registers *reg,t_memory *mem);
void	DAD_D(t_registers *reg,t_memory *mem);
void	DAD_H(t_registers *reg,t_memory *mem);
void	DAD_SP(t_registers *reg,t_memory *mem);
void	LDAX_D(t_registers *reg,t_memory *mem);
void	DCX_D(t_registers *reg,t_memory *mem);
void	DCX_H(t_registers *reg,t_memory *mem);
void	DCX_SP(t_registers *reg,t_memory *mem);
void	RAL(t_registers *reg,t_memory *mem);
void	RAR(t_registers *reg,t_memory *mem);
void	CMA(t_registers *reg,t_memory *mem);
void	SHLD(t_registers *reg,t_memory *mem);
void	LHLD(t_registers *reg,t_memory *mem);
void	STA(t_registers *reg,t_memory *mem);
void	LDA(t_registers *reg,t_memory *mem);
void	MOV_AA(t_registers *reg,t_memory *mem);
void	MOV_AB(t_registers *reg,t_memory *mem);
void	MOV_AC(t_registers *reg,t_memory *mem);
void	MOV_AD(t_registers *reg,t_memory *mem);
void	MOV_AE(t_registers *reg,t_memory *mem);
void	MOV_AH(t_registers *reg,t_memory *mem);
void	MOV_AL(t_registers *reg,t_memory *mem);
void	MOV_AM(t_registers *reg,t_memory *mem);
void	MOV_BA(t_registers *reg,t_memory *mem);
void	MOV_BB(t_registers *reg,t_memory *mem);
void	MOV_BC(t_registers *reg,t_memory *mem);
void	MOV_BD(t_registers *reg,t_memory *mem);
void	MOV_BE(t_registers *reg,t_memory *mem);
void	MOV_BH(t_registers *reg,t_memory *mem);
void	MOV_BL(t_registers *reg,t_memory *mem);
void	MOV_BM(t_registers *reg,t_memory *mem);
void	MOV_CA(t_registers *reg,t_memory *mem);
void	MOV_CB(t_registers *reg,t_memory *mem);
void	MOV_CC(t_registers *reg,t_memory *mem);
void	MOV_CD(t_registers *reg,t_memory *mem);
void	MOV_CE(t_registers *reg,t_memory *mem);
void	MOV_CH(t_registers *reg,t_memory *mem);
void	MOV_CL(t_registers *reg,t_memory *mem);
void	MOV_CM(t_registers *reg,t_memory *mem);
void	MOV_DA(t_registers *reg,t_memory *mem);
void	MOV_DB(t_registers *reg,t_memory *mem);
void	MOV_DC(t_registers *reg,t_memory *mem);
void	MOV_DD(t_registers *reg,t_memory *mem);
void	MOV_DE(t_registers *reg,t_memory *mem);
void	MOV_DH(t_registers *reg,t_memory *mem);
void	MOV_DL(t_registers *reg,t_memory *mem);
void	MOV_DM(t_registers *reg,t_memory *mem);
void	MOV_EA(t_registers *reg,t_memory *mem);
void	MOV_EB(t_registers *reg,t_memory *mem);
void	MOV_EC(t_registers *reg,t_memory *mem);
void	MOV_ED(t_registers *reg,t_memory *mem);
void	MOV_EE(t_registers *reg,t_memory *mem);
void	MOV_EH(t_registers *reg,t_memory *mem);
void	MOV_EL(t_registers *reg,t_memory *mem);
void	MOV_EM(t_registers *reg,t_memory *mem);
void	MOV_HA(t_registers *reg,t_memory *mem);
void	MOV_HB(t_registers *reg,t_memory *mem);
void	MOV_HC(t_registers *reg,t_memory *mem);
void	MOV_HD(t_registers *reg,t_memory *mem);
void	MOV_HE(t_registers *reg,t_memory *mem);
void	MOV_HH(t_registers *reg,t_memory *mem);
void	MOV_HL(t_registers *reg,t_memory *mem);
void	MOV_HM(t_registers *reg,t_memory *mem);
void	MOV_LA(t_registers *reg,t_memory *mem);
void	MOV_LB(t_registers *reg,t_memory *mem);
void	MOV_LC(t_registers *reg,t_memory *mem);
void	MOV_LD(t_registers *reg,t_memory *mem);
void	MOV_LE(t_registers *reg,t_memory *mem);
void	MOV_LH(t_registers *reg,t_memory *mem);
void	MOV_LL(t_registers *reg,t_memory *mem);
void	MOV_LM(t_registers *reg,t_memory *mem);
void	MOV_MA(t_registers *reg,t_memory *mem);
void	MOV_MB(t_registers *reg,t_memory *mem);
void	MOV_MC(t_registers *reg,t_memory *mem);
void	MOV_MD(t_registers *reg,t_memory *mem);
void	MOV_ME(t_registers *reg,t_memory *mem);
void	MOV_MH(t_registers *reg,t_memory *mem);
void	MOV_ML(t_registers *reg,t_memory *mem);
void	MOV_MM(t_registers *reg,t_memory *mem);
void	ADD_A(t_registers *reg,t_memory *mem);
void	ADD_B(t_registers *reg,t_memory *mem);
void	ADD_C(t_registers *reg,t_memory *mem);
void	ADD_D(t_registers *reg,t_memory *mem);
void	ADD_E(t_registers *reg,t_memory *mem);
void	ADD_H(t_registers *reg,t_memory *mem);
void	ADD_L(t_registers *reg,t_memory *mem);
void	ADD_M(t_registers *reg,t_memory *mem);
void	ADC_A(t_registers *reg,t_memory *mem);
void	ADC_B(t_registers *reg,t_memory *mem);
void	ADC_C(t_registers *reg,t_memory *mem);
void	ADC_D(t_registers *reg,t_memory *mem);
void	ADC_E(t_registers *reg,t_memory *mem);
void	ADC_H(t_registers *reg,t_memory *mem);
void	ADC_L(t_registers *reg,t_memory *mem);
void	ADC_M(t_registers *reg,t_memory *mem);
void	SUB_A(t_registers *reg,t_memory *mem);
void	SUB_B(t_registers *reg,t_memory *mem);
void	SUB_C(t_registers *reg,t_memory *mem);
void	SUB_D(t_registers *reg,t_memory *mem);
void	SUB_E(t_registers *reg,t_memory *mem);
void	SUB_H(t_registers *reg,t_memory *mem);
void	SUB_L(t_registers *reg,t_memory *mem);
void	SUB_M(t_registers *reg,t_memory *mem);
void	SSB_A(t_registers *reg,t_memory *mem);
void	SSB_B(t_registers *reg,t_memory *mem);
void	SSB_C(t_registers *reg,t_memory *mem);
void	SSB_D(t_registers *reg,t_memory *mem);
void	SSB_E(t_registers *reg,t_memory *mem);
void	SSB_H(t_registers *reg,t_memory *mem);
void	SSB_L(t_registers *reg,t_memory *mem);
void	SSB_M(t_registers *reg,t_memory *mem);
void	ANA_A(t_registers *reg,t_memory *mem);
void	ANA_B(t_registers *reg,t_memory *mem);
void	ANA_C(t_registers *reg,t_memory *mem);
void	ANA_D(t_registers *reg,t_memory *mem);
void	ANA_E(t_registers *reg,t_memory *mem);
void	ANA_H(t_registers *reg,t_memory *mem);
void	ANA_L(t_registers *reg,t_memory *mem);
void	ANA_M(t_registers *reg,t_memory *mem);
void	XRA_A(t_registers *reg,t_memory *mem);
void	XRA_B(t_registers *reg,t_memory *mem);
void	XRA_C(t_registers *reg,t_memory *mem);
void	XRA_D(t_registers *reg,t_memory *mem);
void	XRA_E(t_registers *reg,t_memory *mem);
void	XRA_H(t_registers *reg,t_memory *mem);
void	XRA_L(t_registers *reg,t_memory *mem);
void	XRA_M(t_registers *reg,t_memory *mem);
void	ORA_A(t_registers *reg,t_memory *mem);
void	ORA_B(t_registers *reg,t_memory *mem);
void	ORA_C(t_registers *reg,t_memory *mem);
void	ORA_D(t_registers *reg,t_memory *mem);
void	ORA_E(t_registers *reg,t_memory *mem);
void	ORA_H(t_registers *reg,t_memory *mem);
void	ORA_L(t_registers *reg,t_memory *mem);
void	ORA_M(t_registers *reg,t_memory *mem);
void	CMP_A(t_registers *reg,t_memory *mem);
void	CMP_B(t_registers *reg,t_memory *mem);
void	CMP_C(t_registers *reg,t_memory *mem);
void	CMP_D(t_registers *reg,t_memory *mem);
void	CMP_E(t_registers *reg,t_memory *mem);
void	CMP_H(t_registers *reg,t_memory *mem);
void	CMP_L(t_registers *reg,t_memory *mem);
void	CMP_M(t_registers *reg,t_memory *mem);
void	POP_B(t_registers *reg,t_memory *mem);
void	POP_D(t_registers *reg,t_memory *mem);
void	POP_H(t_registers *reg,t_memory *mem);
void	POP_PSW(t_registers *reg,t_memory *mem);
void	PUSH_B(t_registers *reg,t_memory *mem);
void	PUSH_D(t_registers *reg,t_memory *mem);
void	PUSH_H(t_registers *reg,t_memory *mem);
void	PUSH_PSW(t_registers *reg,t_memory *mem);
void	JNZ(t_registers *reg,t_memory *mem);
void	JNC(t_registers *reg,t_memory *mem);
void	JM(t_registers *reg,t_memory *mem);
void	JMP(t_registers *reg,t_memory *mem);
void	JP(t_registers *reg,t_memory *mem);
void	JPO(t_registers *reg,t_memory *mem);
void	JPE(t_registers *reg,t_memory *mem);
void	CP(t_registers *reg,t_memory *mem);
void	CM(t_registers *reg,t_memory *mem);
void	CPO(t_registers *reg,t_memory *mem);
void	CPE(t_registers *reg,t_memory *mem);
void	CNZ(t_registers *reg,t_memory *mem);
void	CNC(t_registers *reg,t_memory *mem);
void	JZ(t_registers *reg,t_memory *mem);
void	JC(t_registers *reg,t_memory *mem);
void	CZ(t_registers *reg,t_memory *mem);
void	CC(t_registers *reg,t_memory *mem);
void	CALL(t_registers *reg,t_memory *mem);
void	ADI(t_registers *reg,t_memory *mem);
void	ACI(t_registers *reg,t_memory *mem);
void	SUI(t_registers *reg,t_memory *mem);
void	SBI(t_registers *reg,t_memory *mem);
void	ANI(t_registers *reg,t_memory *mem);
void	XRI(t_registers *reg,t_memory *mem);
void	ORI(t_registers *reg,t_memory *mem);
void	CPI(t_registers *reg,t_memory *mem);
void	IN(t_registers *reg,t_memory *mem);
void	OUT(t_registers *reg,t_memory *mem);
void	RST_0(t_registers *reg,t_memory *mem);
void	RST_1(t_registers *reg,t_memory *mem);
void	RST_2(t_registers *reg,t_memory *mem);
void	RST_3(t_registers *reg,t_memory *mem);
void	RST_4(t_registers *reg,t_memory *mem);
void	RST_5(t_registers *reg,t_memory *mem);
void	RST_6(t_registers *reg,t_memory *mem);
void	RST_7(t_registers *reg,t_memory *mem);

#endif
